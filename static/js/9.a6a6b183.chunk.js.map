{"version":3,"file":"static/js/9.a6a6b183.chunk.js","mappings":"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","sources":["components/Contacts/ContactsForm.jsx","components/Contacts/Container.jsx","components/Contacts/Title.jsx","components/Spinner/Spinner.jsx","components/Contacts/ContactItem.jsx","components/Contacts/ContactsList.jsx","components/Contacts/Filter.jsx","views/Contacts/Contacts.jsx"],"sourcesContent":["import { Notify } from 'notiflix';\nimport {\n  useAddContactMutation,\n  useGetContactsQuery,\n} from '../../redux/contacts/contactsApi';\nimport { useState, useEffect } from 'react';\n\nexport const ContactForm = () => {\n  const { data } = useGetContactsQuery();\n  const [addContact, { isLoading: adding, isSuccess }] =\n    useAddContactMutation();\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  useEffect(() => {\n    if (isSuccess) {\n      Notify.success('Contact was added to your phonebook');\n      setName('');\n      setNumber('');\n    }\n  }, [isSuccess]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (data.some(item => item.name.toLowerCase() === name.toLowerCase())) {\n      Notify.warning(`${name} is already in contacts!`);\n      return;\n    }\n\n    addContact({ name, number });\n  };\n\n  const handleChange = e => {\n    switch (e.target.name) {\n      case 'name':\n        setName(e.target.value);\n        break;\n      case 'number':\n        setNumber(e.target.value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label htmlFor=\"name\">Name:</label>\n      <input\n        onChange={handleChange}\n        value={name}\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        autoComplete=\"off\"\n      />\n\n      <label htmlFor=\"number\">Tel:</label>\n      <input\n        onChange={handleChange}\n        value={number}\n        type=\"tel\"\n        name=\"number\"\n        autoComplete=\"off\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n      />\n\n      <button type=\"submit\">\n        {adding ? <p>adding...</p> : <p>+ add contact</p>}\n      </button>\n    </form>\n  );\n};\n","import PropTypes from 'prop-types';\n\nexport const Container = ({ children }) => <div>{children}</div>;\n\nContainer.propTypes = {\n  children: PropTypes.node,\n};\n","import PropTypes from 'prop-types';\n\nexport const Title = ({ title }) => {\n  return <h2>{title}</h2>;\n};\n\nTitle.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n","import { Rings } from 'react-loader-spinner';\n\nexport const Spinner = () => {\n  return <Rings color=\"#0a5717\" height={30} width={30} />;\n};\n","import { useRemoveContactMutation } from 'redux/contacts/contactsApi';\nimport { Notify } from 'notiflix';\nimport { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Spinner } from 'components/Spinner/Spinner';\n\nexport const ContactItem = ({ name, number, id }) => {\n  const [removeContact, { isLoading: isRemoving, isSuccess }] =\n    useRemoveContactMutation();\n  useEffect(() => {\n    if (isSuccess) {\n      Notify.success('Contact deleted');\n    }\n  }, [removeContact, isSuccess]);\n  return (\n    <li key={id}>\n      <p>\n        {name}: {number}\n      </p>\n      <button type=\"button\" onClick={() => removeContact(id)}>\n        {isRemoving ? <Spinner /> : 'X'}\n      </button>\n    </li>\n  );\n};\n\nContactItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n};\n","import { useGetContactsQuery } from 'redux/contacts/contactsApi';\nimport { ContactItem } from './ContactItem';\nimport { useSelector } from 'react-redux';\nimport { selectFilter } from 'redux/contacts/filterSlice';\nimport { Spinner } from 'components/Spinner/Spinner';\n\nexport const ContactsList = () => {\n  const { data, isLoading } = useGetContactsQuery();\n  const filter = useSelector(selectFilter);\n  return (\n    <ul>\n      {isLoading && <Spinner />}\n      {data &&\n        data\n          .filter(contact =>\n            contact.name.toLowerCase().includes(filter.toLowerCase())\n          )\n          .map(({ name, id, number }) => {\n            return <ContactItem key={id} name={name} number={number} id={id} />;\n          })}\n    </ul>\n  );\n};\n","import { setFilter, selectFilter } from 'redux/contacts/filterSlice';\nimport { useSelector, useDispatch } from 'react-redux';\n\nexport const Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    dispatch(setFilter(e.target.value));\n  };\n  return (\n    <>\n      <label htmlFor=\"filter\">Find contacts by name</label>\n      <input type=\"text\" name=\"filter\" onChange={handleChange} value={filter} />\n    </>\n  );\n};\n","import { ContactForm } from 'components/Contacts/ContactsForm';\nimport { Container } from 'components/Contacts/Container';\nimport { Title } from 'components/Contacts/Title';\nimport { ContactsList } from 'components/Contacts/ContactsList';\nimport { Filter } from 'components/Contacts/Filter';\n\nconst Contacts = () => {\n  return (\n    <Container>\n      <Title title=\"Phonebook\" />\n      <ContactForm />\n      <Title title=\"Contacts\" />\n      <Filter />\n      <ContactsList />\n    </Container>\n  );\n};\n\nexport default Contacts;\n"],"names":["ContactForm","data","useGetContactsQuery","useAddContactMutation","addContact","adding","isLoading","isSuccess","useState","name","setName","number","setNumber","useEffect","Notify","handleChange","e","target","value","onSubmit","preventDefault","some","item","toLowerCase","htmlFor","onChange","type","pattern","title","required","autoComplete","Container","children","Title","Spinner","color","height","width","ContactItem","id","useRemoveContactMutation","removeContact","isRemoving","onClick","ContactsList","filter","useSelector","selectFilter","contact","includes","map","Filter","dispatch","useDispatch","setFilter"],"sourceRoot":""}